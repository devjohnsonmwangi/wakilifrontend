import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { APIDomain } from "../../utils/APIDomain";

// Enums for Payment Table
export type PaymentStatus = "pending" | "paid" | "failed";
export type PaymentGateway = "stripe" | "mpesa" | "cash";

// Payment Data Types
export interface PaymentDataTypes {
    payment_id?: number; // Optional because it might be auto-generated
    case_id: number;
    user_id: number;
    payment_amount: number; // amount
    payment_status?: PaymentStatus; // Optional since backend has a default value
    payment_gateway: PaymentGateway; // Which gateway was used?
    payment_notes?: string | null; // Optional notes
    transaction_id: string; // A unique ID generated by the specific gateway. Required.
    stripe_charge_id?: string | null; // Stripe's charge ID (if Stripe was used)
    stripe_customer_id?: string | null; // Stripe Customer Id
    mpesa_checkout_request_id?: string | null; // M-Pesa's checkout request ID
    mpesa_receipt_number?: string | null; // M-Pesa's receipt number
    mpesa_phone_number?: string | null; // Phone number of the user that made the payment
    payment_date?: string; // backend has a default value
    updated_at?: string; // backend has a default value
}

// M-Pesa Callback Data Type
export interface MpesaCallbackData {
    transaction_id: string;
    amount: number;
    status: string; // e.g., "success", "failed"
    // Add other fields as necessary
}

// Stripe Webhook Data Type
export interface StripeWebhookData {
    id: string; // Event ID
    type: string; // Event type
    data: {
        object: {
            id: string;
            amount: number;
            status: string; // e.g., "succeeded", "failed"
            // Add other fields as necessary
        };
    };
}

// Interface for Create Payment Intent Request
interface CreatePaymentIntentRequest {
    amount: number;
    payment_id: number;
}

// Payment API Slice
export const paymentAPI = createApi({
    reducerPath: "paymentAPI",
    baseQuery: fetchBaseQuery({ baseUrl: APIDomain }),
    refetchOnReconnect: true,
    tagTypes: ["Payments"],
    endpoints: (builder) => ({
        // Fetch all payments
        fetchPayments: builder.query<PaymentDataTypes[], void>({
            query: () => "payments", // Updated URL
            providesTags: ["Payments"],
        }),
        // Get a payment by ID
        getPaymentById: builder.query<PaymentDataTypes, number>({
            query: (payment_id) => `payments/${payment_id}`, // Updated URL
            providesTags: ["Payments"],
        }),
        // Create a new payment
        createPayment: builder.mutation<PaymentDataTypes, Omit<PaymentDataTypes, 'payment_id' | 'payment_date' | 'updated_at' | 'payment_status'>>({
            query: (newPayment) => ({
                url: "payments", // Updated URL
                method: "POST",
                body: newPayment,
            }),
            invalidatesTags: ["Payments"],
        }),
        // Create a cash payment
        createCashPayment: builder.mutation<PaymentDataTypes, Omit<PaymentDataTypes, 'payment_id' | 'payment_date' | 'updated_at' | 'payment_status' | 'stripe_charge_id' | 'stripe_customer_id' | 'mpesa_checkout_request_id' | 'mpesa_receipt_number' | 'mpesa_phone_number'>>({
            query: (newPayment) => ({
                url: "cash", // Updated URL
                method: "POST",
                body: newPayment,
            }),
            invalidatesTags: ["Payments"],
        }),
        // Create Payment Intent (Stripe)
        createPaymentIntent: builder.mutation<{ clientSecret: string }, CreatePaymentIntentRequest>({
            query: (data) => ({
                url: "create-payment-intent",
                method: "POST",
                body: data,
            }),
        }),
        // Handle M-Pesa callback
        mpesaCallback: builder.mutation<{ success: boolean }, MpesaCallbackData>({
            query: (callbackData) => ({
                url: "mpesacallback", // Updated URL
                method: "POST",
                body: callbackData,
            }),
        }),
        // Handle Stripe webhook
        stripeWebhook: builder.mutation<{ success: boolean }, StripeWebhookData>({
            query: (webhookData) => ({
                url: "stripewebhook", // Updated URL
                method: "POST",
                body: webhookData,
            }),
        }),
        // Update an existing payment
        updatePayment: builder.mutation<PaymentDataTypes, Partial<PaymentDataTypes & { payment_id: number }>>({
            query: ({ payment_id, ...rest }) => ({
                url: `payments/${payment_id}`, // Updated URL
                method: "PUT",
                body: rest,
            }),
            invalidatesTags: ["Payments"],
        }),
        // Delete a payment by ID
        deletePayment: builder.mutation<{ success: boolean; payment_id: number }, number>({
            query: (payment_id) => ({
                url: `payments/${payment_id}`, // Updated URL
                method: "DELETE",
            }),
            invalidatesTags: ["Payments"],
        }),
    }),
});

// Export hooks for usage in components
export const {
    useFetchPaymentsQuery,
    useGetPaymentByIdQuery,
    useCreatePaymentMutation,
    useCreateCashPaymentMutation,
    useCreatePaymentIntentMutation, // Add this
    useMpesaCallbackMutation,
    useStripeWebhookMutation,
    useUpdatePaymentMutation,
    useDeletePaymentMutation,
} = paymentAPI;